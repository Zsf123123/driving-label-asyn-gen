/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.muheda.thrift.produce;



@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-18")
public class DrivingRouteData {

  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public int liveCheck() throws org.apache.thrift.TException;

    public boolean sendDrivingRoute(String deviceId, java.util.List<LngAndLat> originRoute, java.util.List<LngAndLat> repairedList, java.util.List<LngAndLat> mappingRoad, String roadId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void liveCheck(org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException;

    public void sendDrivingRoute(String deviceId, java.util.List<LngAndLat> originRoute, java.util.List<LngAndLat> repairedList, java.util.List<LngAndLat> mappingRoad, String roadId, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public int liveCheck() throws org.apache.thrift.TException
    {
      send_liveCheck();
      return recv_liveCheck();
    }

    public void send_liveCheck() throws org.apache.thrift.TException
    {
      liveCheck_args args = new liveCheck_args();
      sendBase("liveCheck", args);
    }

    public int recv_liveCheck() throws org.apache.thrift.TException
    {
      liveCheck_result result = new liveCheck_result();
      receiveBase(result, "liveCheck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "liveCheck failed: unknown result");
    }

    public boolean sendDrivingRoute(String deviceId, java.util.List<LngAndLat> originRoute, java.util.List<LngAndLat> repairedList, java.util.List<LngAndLat> mappingRoad, String roadId) throws org.apache.thrift.TException
    {
      send_sendDrivingRoute(deviceId, originRoute, repairedList, mappingRoad, roadId);
      return recv_sendDrivingRoute();
    }

    public void send_sendDrivingRoute(String deviceId, java.util.List<LngAndLat> originRoute, java.util.List<LngAndLat> repairedList, java.util.List<LngAndLat> mappingRoad, String roadId) throws org.apache.thrift.TException
    {
      sendDrivingRoute_args args = new sendDrivingRoute_args();
      args.setDeviceId(deviceId);
      args.setOriginRoute(originRoute);
      args.setRepairedList(repairedList);
      args.setMappingRoad(mappingRoad);
      args.setRoadId(roadId);
      sendBase("sendDrivingRoute", args);
    }

    public boolean recv_sendDrivingRoute() throws org.apache.thrift.TException
    {
      sendDrivingRoute_result result = new sendDrivingRoute_result();
      receiveBase(result, "sendDrivingRoute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendDrivingRoute failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void liveCheck(org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      liveCheck_call method_call = new liveCheck_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class liveCheck_call extends org.apache.thrift.async.TAsyncMethodCall<Integer> {
      public liveCheck_call(org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("liveCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        liveCheck_args args = new liveCheck_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_liveCheck();
      }
    }

    public void sendDrivingRoute(String deviceId, java.util.List<LngAndLat> originRoute, java.util.List<LngAndLat> repairedList, java.util.List<LngAndLat> mappingRoad, String roadId, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendDrivingRoute_call method_call = new sendDrivingRoute_call(deviceId, originRoute, repairedList, mappingRoad, roadId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendDrivingRoute_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String deviceId;
      private java.util.List<LngAndLat> originRoute;
      private java.util.List<LngAndLat> repairedList;
      private java.util.List<LngAndLat> mappingRoad;
      private String roadId;
      public sendDrivingRoute_call(String deviceId, java.util.List<LngAndLat> originRoute, java.util.List<LngAndLat> repairedList, java.util.List<LngAndLat> mappingRoad, String roadId, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.originRoute = originRoute;
        this.repairedList = repairedList;
        this.mappingRoad = mappingRoad;
        this.roadId = roadId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendDrivingRoute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendDrivingRoute_args args = new sendDrivingRoute_args();
        args.setDeviceId(deviceId);
        args.setOriginRoute(originRoute);
        args.setRepairedList(repairedList);
        args.setMappingRoad(mappingRoad);
        args.setRoadId(roadId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendDrivingRoute();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("liveCheck", new liveCheck());
      processMap.put("sendDrivingRoute", new sendDrivingRoute());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class liveCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, liveCheck_args> {
      public liveCheck() {
        super("liveCheck");
      }

      public liveCheck_args getEmptyArgsInstance() {
        return new liveCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public liveCheck_result getResult(I iface, liveCheck_args args) throws org.apache.thrift.TException {
        liveCheck_result result = new liveCheck_result();
        result.success = iface.liveCheck();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class sendDrivingRoute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendDrivingRoute_args> {

      public sendDrivingRoute() {
        super("sendDrivingRoute");
      }

      public sendDrivingRoute_args getEmptyArgsInstance() {
        return new sendDrivingRoute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sendDrivingRoute_result getResult(I iface, sendDrivingRoute_args args) throws org.apache.thrift.TException {
        sendDrivingRoute_result result = new sendDrivingRoute_result();
        result.success = iface.sendDrivingRoute(args.deviceId, args.originRoute, args.repairedList, args.mappingRoad, args.roadId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("liveCheck", new liveCheck());
      processMap.put("sendDrivingRoute", new sendDrivingRoute());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class liveCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, liveCheck_args, Integer> {
      public liveCheck() {
        super("liveCheck");
      }

      public liveCheck_args getEmptyArgsInstance() {
        return new liveCheck_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            liveCheck_result result = new liveCheck_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            liveCheck_result result = new liveCheck_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, liveCheck_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
        iface.liveCheck(resultHandler);
      }
    }

    public static class sendDrivingRoute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendDrivingRoute_args, Boolean> {
      public sendDrivingRoute() {
        super("sendDrivingRoute");
      }

      public sendDrivingRoute_args getEmptyArgsInstance() {
        return new sendDrivingRoute_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            sendDrivingRoute_result result = new sendDrivingRoute_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendDrivingRoute_result result = new sendDrivingRoute_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendDrivingRoute_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.sendDrivingRoute(args.deviceId, args.originRoute, args.repairedList, args.mappingRoad, args.roadId,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class liveCheck_args implements org.apache.thrift.TBase<liveCheck_args, liveCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<liveCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("liveCheck_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new liveCheck_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new liveCheck_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(liveCheck_args.class, metaDataMap);
    }

    public liveCheck_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public liveCheck_args(liveCheck_args other) {
    }

    public liveCheck_args deepCopy() {
      return new liveCheck_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof liveCheck_args)
        return this.equals((liveCheck_args)that);
      return false;
    }

    public boolean equals(liveCheck_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(liveCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("liveCheck_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class liveCheck_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public liveCheck_argsStandardScheme getScheme() {
        return new liveCheck_argsStandardScheme();
      }
    }

    private static class liveCheck_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<liveCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, liveCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, liveCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class liveCheck_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public liveCheck_argsTupleScheme getScheme() {
        return new liveCheck_argsTupleScheme();
      }
    }

    private static class liveCheck_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<liveCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, liveCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, liveCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class liveCheck_result implements org.apache.thrift.TBase<liveCheck_result, liveCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<liveCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("liveCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new liveCheck_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new liveCheck_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(liveCheck_result.class, metaDataMap);
    }

    public liveCheck_result() {
    }

    public liveCheck_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public liveCheck_result(liveCheck_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public liveCheck_result deepCopy() {
      return new liveCheck_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public liveCheck_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof liveCheck_result)
        return this.equals((liveCheck_result)that);
      return false;
    }

    public boolean equals(liveCheck_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(liveCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("liveCheck_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class liveCheck_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public liveCheck_resultStandardScheme getScheme() {
        return new liveCheck_resultStandardScheme();
      }
    }

    private static class liveCheck_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<liveCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, liveCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, liveCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class liveCheck_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public liveCheck_resultTupleScheme getScheme() {
        return new liveCheck_resultTupleScheme();
      }
    }

    private static class liveCheck_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<liveCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, liveCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, liveCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendDrivingRoute_args implements org.apache.thrift.TBase<sendDrivingRoute_args, sendDrivingRoute_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendDrivingRoute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendDrivingRoute_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)-1);
    private static final org.apache.thrift.protocol.TField ORIGIN_ROUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("originRoute", org.apache.thrift.protocol.TType.LIST, (short)-2);
    private static final org.apache.thrift.protocol.TField REPAIRED_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("repairedList", org.apache.thrift.protocol.TType.LIST, (short)-3);
    private static final org.apache.thrift.protocol.TField MAPPING_ROAD_FIELD_DESC = new org.apache.thrift.protocol.TField("mappingRoad", org.apache.thrift.protocol.TType.LIST, (short)-4);
    private static final org.apache.thrift.protocol.TField ROAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roadId", org.apache.thrift.protocol.TType.STRING, (short)-5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendDrivingRoute_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendDrivingRoute_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String deviceId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<LngAndLat> originRoute; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<LngAndLat> repairedList; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<LngAndLat> mappingRoad; // required
    public @org.apache.thrift.annotation.Nullable String roadId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)-1, "deviceId"),
      ORIGIN_ROUTE((short)-2, "originRoute"),
      REPAIRED_LIST((short)-3, "repairedList"),
      MAPPING_ROAD((short)-4, "mappingRoad"),
      ROAD_ID((short)-5, "roadId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // DEVICE_ID
            return DEVICE_ID;
          case -2: // ORIGIN_ROUTE
            return ORIGIN_ROUTE;
          case -3: // REPAIRED_LIST
            return REPAIRED_LIST;
          case -4: // MAPPING_ROAD
            return MAPPING_ROAD;
          case -5: // ROAD_ID
            return ROAD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORIGIN_ROUTE, new org.apache.thrift.meta_data.FieldMetaData("originRoute", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LngAndLat.class))));
      tmpMap.put(_Fields.REPAIRED_LIST, new org.apache.thrift.meta_data.FieldMetaData("repairedList", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LngAndLat.class))));
      tmpMap.put(_Fields.MAPPING_ROAD, new org.apache.thrift.meta_data.FieldMetaData("mappingRoad", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LngAndLat.class))));
      tmpMap.put(_Fields.ROAD_ID, new org.apache.thrift.meta_data.FieldMetaData("roadId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendDrivingRoute_args.class, metaDataMap);
    }

    public sendDrivingRoute_args() {
    }

    public sendDrivingRoute_args(
      String deviceId,
      java.util.List<LngAndLat> originRoute,
      java.util.List<LngAndLat> repairedList,
      java.util.List<LngAndLat> mappingRoad,
      String roadId)
    {
      this();
      this.deviceId = deviceId;
      this.originRoute = originRoute;
      this.repairedList = repairedList;
      this.mappingRoad = mappingRoad;
      this.roadId = roadId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendDrivingRoute_args(sendDrivingRoute_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetOriginRoute()) {
        java.util.List<LngAndLat> __this__originRoute = new java.util.ArrayList<LngAndLat>(other.originRoute.size());
        for (LngAndLat other_element : other.originRoute) {
          __this__originRoute.add(new LngAndLat(other_element));
        }
        this.originRoute = __this__originRoute;
      }
      if (other.isSetRepairedList()) {
        java.util.List<LngAndLat> __this__repairedList = new java.util.ArrayList<LngAndLat>(other.repairedList.size());
        for (LngAndLat other_element : other.repairedList) {
          __this__repairedList.add(new LngAndLat(other_element));
        }
        this.repairedList = __this__repairedList;
      }
      if (other.isSetMappingRoad()) {
        java.util.List<LngAndLat> __this__mappingRoad = new java.util.ArrayList<LngAndLat>(other.mappingRoad.size());
        for (LngAndLat other_element : other.mappingRoad) {
          __this__mappingRoad.add(new LngAndLat(other_element));
        }
        this.mappingRoad = __this__mappingRoad;
      }
      if (other.isSetRoadId()) {
        this.roadId = other.roadId;
      }
    }

    public sendDrivingRoute_args deepCopy() {
      return new sendDrivingRoute_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.originRoute = null;
      this.repairedList = null;
      this.mappingRoad = null;
      this.roadId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getDeviceId() {
      return this.deviceId;
    }

    public sendDrivingRoute_args setDeviceId(@org.apache.thrift.annotation.Nullable String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public int getOriginRouteSize() {
      return (this.originRoute == null) ? 0 : this.originRoute.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<LngAndLat> getOriginRouteIterator() {
      return (this.originRoute == null) ? null : this.originRoute.iterator();
    }

    public void addToOriginRoute(LngAndLat elem) {
      if (this.originRoute == null) {
        this.originRoute = new java.util.ArrayList<LngAndLat>();
      }
      this.originRoute.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<LngAndLat> getOriginRoute() {
      return this.originRoute;
    }

    public sendDrivingRoute_args setOriginRoute(@org.apache.thrift.annotation.Nullable java.util.List<LngAndLat> originRoute) {
      this.originRoute = originRoute;
      return this;
    }

    public void unsetOriginRoute() {
      this.originRoute = null;
    }

    /** Returns true if field originRoute is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginRoute() {
      return this.originRoute != null;
    }

    public void setOriginRouteIsSet(boolean value) {
      if (!value) {
        this.originRoute = null;
      }
    }

    public int getRepairedListSize() {
      return (this.repairedList == null) ? 0 : this.repairedList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<LngAndLat> getRepairedListIterator() {
      return (this.repairedList == null) ? null : this.repairedList.iterator();
    }

    public void addToRepairedList(LngAndLat elem) {
      if (this.repairedList == null) {
        this.repairedList = new java.util.ArrayList<LngAndLat>();
      }
      this.repairedList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<LngAndLat> getRepairedList() {
      return this.repairedList;
    }

    public sendDrivingRoute_args setRepairedList(@org.apache.thrift.annotation.Nullable java.util.List<LngAndLat> repairedList) {
      this.repairedList = repairedList;
      return this;
    }

    public void unsetRepairedList() {
      this.repairedList = null;
    }

    /** Returns true if field repairedList is set (has been assigned a value) and false otherwise */
    public boolean isSetRepairedList() {
      return this.repairedList != null;
    }

    public void setRepairedListIsSet(boolean value) {
      if (!value) {
        this.repairedList = null;
      }
    }

    public int getMappingRoadSize() {
      return (this.mappingRoad == null) ? 0 : this.mappingRoad.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<LngAndLat> getMappingRoadIterator() {
      return (this.mappingRoad == null) ? null : this.mappingRoad.iterator();
    }

    public void addToMappingRoad(LngAndLat elem) {
      if (this.mappingRoad == null) {
        this.mappingRoad = new java.util.ArrayList<LngAndLat>();
      }
      this.mappingRoad.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<LngAndLat> getMappingRoad() {
      return this.mappingRoad;
    }

    public sendDrivingRoute_args setMappingRoad(@org.apache.thrift.annotation.Nullable java.util.List<LngAndLat> mappingRoad) {
      this.mappingRoad = mappingRoad;
      return this;
    }

    public void unsetMappingRoad() {
      this.mappingRoad = null;
    }

    /** Returns true if field mappingRoad is set (has been assigned a value) and false otherwise */
    public boolean isSetMappingRoad() {
      return this.mappingRoad != null;
    }

    public void setMappingRoadIsSet(boolean value) {
      if (!value) {
        this.mappingRoad = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getRoadId() {
      return this.roadId;
    }

    public sendDrivingRoute_args setRoadId(@org.apache.thrift.annotation.Nullable String roadId) {
      this.roadId = roadId;
      return this;
    }

    public void unsetRoadId() {
      this.roadId = null;
    }

    /** Returns true if field roadId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoadId() {
      return this.roadId != null;
    }

    public void setRoadIdIsSet(boolean value) {
      if (!value) {
        this.roadId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case ORIGIN_ROUTE:
        if (value == null) {
          unsetOriginRoute();
        } else {
          setOriginRoute((java.util.List<LngAndLat>)value);
        }
        break;

      case REPAIRED_LIST:
        if (value == null) {
          unsetRepairedList();
        } else {
          setRepairedList((java.util.List<LngAndLat>)value);
        }
        break;

      case MAPPING_ROAD:
        if (value == null) {
          unsetMappingRoad();
        } else {
          setMappingRoad((java.util.List<LngAndLat>)value);
        }
        break;

      case ROAD_ID:
        if (value == null) {
          unsetRoadId();
        } else {
          setRoadId((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case ORIGIN_ROUTE:
        return getOriginRoute();

      case REPAIRED_LIST:
        return getRepairedList();

      case MAPPING_ROAD:
        return getMappingRoad();

      case ROAD_ID:
        return getRoadId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case ORIGIN_ROUTE:
        return isSetOriginRoute();
      case REPAIRED_LIST:
        return isSetRepairedList();
      case MAPPING_ROAD:
        return isSetMappingRoad();
      case ROAD_ID:
        return isSetRoadId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendDrivingRoute_args)
        return this.equals((sendDrivingRoute_args)that);
      return false;
    }

    public boolean equals(sendDrivingRoute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_originRoute = true && this.isSetOriginRoute();
      boolean that_present_originRoute = true && that.isSetOriginRoute();
      if (this_present_originRoute || that_present_originRoute) {
        if (!(this_present_originRoute && that_present_originRoute))
          return false;
        if (!this.originRoute.equals(that.originRoute))
          return false;
      }

      boolean this_present_repairedList = true && this.isSetRepairedList();
      boolean that_present_repairedList = true && that.isSetRepairedList();
      if (this_present_repairedList || that_present_repairedList) {
        if (!(this_present_repairedList && that_present_repairedList))
          return false;
        if (!this.repairedList.equals(that.repairedList))
          return false;
      }

      boolean this_present_mappingRoad = true && this.isSetMappingRoad();
      boolean that_present_mappingRoad = true && that.isSetMappingRoad();
      if (this_present_mappingRoad || that_present_mappingRoad) {
        if (!(this_present_mappingRoad && that_present_mappingRoad))
          return false;
        if (!this.mappingRoad.equals(that.mappingRoad))
          return false;
      }

      boolean this_present_roadId = true && this.isSetRoadId();
      boolean that_present_roadId = true && that.isSetRoadId();
      if (this_present_roadId || that_present_roadId) {
        if (!(this_present_roadId && that_present_roadId))
          return false;
        if (!this.roadId.equals(that.roadId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDeviceId()) ? 131071 : 524287);
      if (isSetDeviceId())
        hashCode = hashCode * 8191 + deviceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetOriginRoute()) ? 131071 : 524287);
      if (isSetOriginRoute())
        hashCode = hashCode * 8191 + originRoute.hashCode();

      hashCode = hashCode * 8191 + ((isSetRepairedList()) ? 131071 : 524287);
      if (isSetRepairedList())
        hashCode = hashCode * 8191 + repairedList.hashCode();

      hashCode = hashCode * 8191 + ((isSetMappingRoad()) ? 131071 : 524287);
      if (isSetMappingRoad())
        hashCode = hashCode * 8191 + mappingRoad.hashCode();

      hashCode = hashCode * 8191 + ((isSetRoadId()) ? 131071 : 524287);
      if (isSetRoadId())
        hashCode = hashCode * 8191 + roadId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendDrivingRoute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOriginRoute()).compareTo(other.isSetOriginRoute());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginRoute()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originRoute, other.originRoute);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepairedList()).compareTo(other.isSetRepairedList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepairedList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repairedList, other.repairedList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMappingRoad()).compareTo(other.isSetMappingRoad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappingRoad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappingRoad, other.mappingRoad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoadId()).compareTo(other.isSetRoadId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoadId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roadId, other.roadId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendDrivingRoute_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("originRoute:");
      if (this.originRoute == null) {
        sb.append("null");
      } else {
        sb.append(this.originRoute);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repairedList:");
      if (this.repairedList == null) {
        sb.append("null");
      } else {
        sb.append(this.repairedList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mappingRoad:");
      if (this.mappingRoad == null) {
        sb.append("null");
      } else {
        sb.append(this.mappingRoad);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roadId:");
      if (this.roadId == null) {
        sb.append("null");
      } else {
        sb.append(this.roadId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendDrivingRoute_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendDrivingRoute_argsStandardScheme getScheme() {
        return new sendDrivingRoute_argsStandardScheme();
      }
    }

    private static class sendDrivingRoute_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendDrivingRoute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendDrivingRoute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case -1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -2: // ORIGIN_ROUTE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.originRoute = new java.util.ArrayList<LngAndLat>(_list0.size);
                  @org.apache.thrift.annotation.Nullable LngAndLat _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new LngAndLat();
                    _elem1.read(iprot);
                    struct.originRoute.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setOriginRouteIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -3: // REPAIRED_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.repairedList = new java.util.ArrayList<LngAndLat>(_list3.size);
                  @org.apache.thrift.annotation.Nullable LngAndLat _elem4;
                  for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                  {
                    _elem4 = new LngAndLat();
                    _elem4.read(iprot);
                    struct.repairedList.add(_elem4);
                  }
                  iprot.readListEnd();
                }
                struct.setRepairedListIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -4: // MAPPING_ROAD
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                  struct.mappingRoad = new java.util.ArrayList<LngAndLat>(_list6.size);
                  @org.apache.thrift.annotation.Nullable LngAndLat _elem7;
                  for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                  {
                    _elem7 = new LngAndLat();
                    _elem7.read(iprot);
                    struct.mappingRoad.add(_elem7);
                  }
                  iprot.readListEnd();
                }
                struct.setMappingRoadIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -5: // ROAD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roadId = iprot.readString();
                struct.setRoadIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendDrivingRoute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roadId != null) {
          oprot.writeFieldBegin(ROAD_ID_FIELD_DESC);
          oprot.writeString(struct.roadId);
          oprot.writeFieldEnd();
        }
        if (struct.mappingRoad != null) {
          oprot.writeFieldBegin(MAPPING_ROAD_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mappingRoad.size()));
            for (LngAndLat _iter9 : struct.mappingRoad)
            {
              _iter9.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.repairedList != null) {
          oprot.writeFieldBegin(REPAIRED_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.repairedList.size()));
            for (LngAndLat _iter10 : struct.repairedList)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.originRoute != null) {
          oprot.writeFieldBegin(ORIGIN_ROUTE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.originRoute.size()));
            for (LngAndLat _iter11 : struct.originRoute)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendDrivingRoute_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendDrivingRoute_argsTupleScheme getScheme() {
        return new sendDrivingRoute_argsTupleScheme();
      }
    }

    private static class sendDrivingRoute_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendDrivingRoute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendDrivingRoute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetOriginRoute()) {
          optionals.set(1);
        }
        if (struct.isSetRepairedList()) {
          optionals.set(2);
        }
        if (struct.isSetMappingRoad()) {
          optionals.set(3);
        }
        if (struct.isSetRoadId()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetOriginRoute()) {
          {
            oprot.writeI32(struct.originRoute.size());
            for (LngAndLat _iter12 : struct.originRoute)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetRepairedList()) {
          {
            oprot.writeI32(struct.repairedList.size());
            for (LngAndLat _iter13 : struct.repairedList)
            {
              _iter13.write(oprot);
            }
          }
        }
        if (struct.isSetMappingRoad()) {
          {
            oprot.writeI32(struct.mappingRoad.size());
            for (LngAndLat _iter14 : struct.mappingRoad)
            {
              _iter14.write(oprot);
            }
          }
        }
        if (struct.isSetRoadId()) {
          oprot.writeString(struct.roadId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendDrivingRoute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.originRoute = new java.util.ArrayList<LngAndLat>(_list15.size);
            @org.apache.thrift.annotation.Nullable LngAndLat _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = new LngAndLat();
              _elem16.read(iprot);
              struct.originRoute.add(_elem16);
            }
          }
          struct.setOriginRouteIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.repairedList = new java.util.ArrayList<LngAndLat>(_list18.size);
            @org.apache.thrift.annotation.Nullable LngAndLat _elem19;
            for (int _i20 = 0; _i20 < _list18.size; ++_i20)
            {
              _elem19 = new LngAndLat();
              _elem19.read(iprot);
              struct.repairedList.add(_elem19);
            }
          }
          struct.setRepairedListIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.mappingRoad = new java.util.ArrayList<LngAndLat>(_list21.size);
            @org.apache.thrift.annotation.Nullable LngAndLat _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new LngAndLat();
              _elem22.read(iprot);
              struct.mappingRoad.add(_elem22);
            }
          }
          struct.setMappingRoadIsSet(true);
        }
        if (incoming.get(4)) {
          struct.roadId = iprot.readString();
          struct.setRoadIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendDrivingRoute_result implements org.apache.thrift.TBase<sendDrivingRoute_result, sendDrivingRoute_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendDrivingRoute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendDrivingRoute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendDrivingRoute_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendDrivingRoute_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendDrivingRoute_result.class, metaDataMap);
    }

    public sendDrivingRoute_result() {
    }

    public sendDrivingRoute_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendDrivingRoute_result(sendDrivingRoute_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public sendDrivingRoute_result deepCopy() {
      return new sendDrivingRoute_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendDrivingRoute_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendDrivingRoute_result)
        return this.equals((sendDrivingRoute_result)that);
      return false;
    }

    public boolean equals(sendDrivingRoute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(sendDrivingRoute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendDrivingRoute_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendDrivingRoute_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendDrivingRoute_resultStandardScheme getScheme() {
        return new sendDrivingRoute_resultStandardScheme();
      }
    }

    private static class sendDrivingRoute_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendDrivingRoute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendDrivingRoute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendDrivingRoute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendDrivingRoute_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendDrivingRoute_resultTupleScheme getScheme() {
        return new sendDrivingRoute_resultTupleScheme();
      }
    }

    private static class sendDrivingRoute_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendDrivingRoute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendDrivingRoute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendDrivingRoute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
